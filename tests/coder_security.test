<?php
require_once(dirname(__FILE__) .'/coder_test_case.tinc');

class CoderSecurityTest extends CoderTestCase {
  function __construct($id = NULL) {
    parent::__construct('security', $id);
  }
  
  public static function getInfo() {
    return array(
      'name' => t('Coder Security Tests'),
      'description' => t('Tests for the coder security review.'),
      'group' => t('Coder'),
    );
  }

  function testSecurityCheckPlain() {
    $this->assertCoderFail('$var = l(check_plain($input), "path/to/drupal");');
    $this->assertCoderFail('$var = l(check_plain($input), "path/to/drupal", array("html" => FALSE);');
    $this->assertCoderFail('$var = l(check_plain($input), "path/to/drupal", array("html" => $value);');
    $this->assertCoderFail('$var = l(check_plain($input), "path/to/drupal", array("html" => 0);');
    $this->assertCoderPass('$var = l(check_plain($input), "path/to/drupal", array("html" => TRUE);');
    $this->assertCoderPass('$var = l(check_plain($input), "path/to/drupal", array(\'html\' => TRUE);');
    $this->assertCoderPass('$var = l(check_plain($input), "path/to/drupal", array("html" => 1);');
    $this->assertCoderPass('$var = l(check_plain($input), "path/to/drupal", array(\'html\' => 1);');
  }

  function testSecuritySQLVariableInjection() {
    $this->assertCoderFail('  $results = db_query("SELECT * FROM {node_revisions} WHERE nid=$nid");');
    $this->assertCoderPass('  $results = db_query("SELECT * FROM {false_accounts} WHERE uids REGEXP \'^%s,|,%s,|,%s$\'");');
    $this->assertCoderPass('  $results = db_query(db_rewrite_sql("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=\'%s\' AND (r.title REGEXP \'^[^[:alpha:]].*$\')"));');
    $this->assertCoderFail('  $results = db_query(db_rewrite_sql("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=\'%s\' AND (r.title REGEXP \'^[^[:alpha:]].*$\') AND nid=$nid"));');
    $this->assertCoderFail('  $results = db_query(db_rewrite_sql("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=$type AND (r.title REGEXP \'^[^[:alpha:]].*$\')"));');
    $this->assertCoderFail('  $results = db_query("SELECT * FROM {foo} WHERE name=$name");');
    $this->assertCoderFail('  db_query("INSERT INTO {foo} SET name=\'$name\'");');
    $this->assertCoderFail('  $sql = "INSERT INTO {foo} SET name=\'$name\'";');
    $this->assertCoderPass('  update_sql("INSERT INTO {foo} SET name=\'$name\'");');
    $this->assertCoderPass('  db_result(db_query("SELECT filename FROM {system} WHERE name = \'%s\'", "ad_$detail->adtype"));');
  }

  function testSecuritySQLUnquotedPlaceholders() {
    $this->assertCoderFail('  $sql = "SELECT * FROM {foo} WHERE name=%s";');
    $this->assertCoderFail('  $sql = "INSERT INTO {foo} (%s)";');
    $this->assertCoderFail('  $sql = "INSERT INTO {foo} (1,%s)";');
    $this->assertCoderFail('  $sql = "INSERT INTO {foo} (1, %s)";');
    $this->assertCoderPass('  $sql = "SELECT * FROM {foo} WHERE name=\'%s\'";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (\'%s\')";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (1,\'%s\')";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (1, \'%s\')";');
    $this->assertCoderPass('  $sql = "SELECT * FROM {foo} WHERE name=%d";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (%d)";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (1,%d)";');
    $this->assertCoderPass('  $sql = "INSERT INTO {foo} (1, %d)";');
  }

  function testDrupalSetMessageTitle() {
    $this->assertCoderPass('  drupal_set_message(t("Here is some safe_data"));');
    $this->assertCoderPass('  drupal_set_message(t("Here is some @safe_data", array("@safe_data" => $tainted_data));');
    $this->assertCoderPass('  drupal_set_message(t("Here is some %safe_data", array("%safe_data" => $tainted_data));');
    $this->assertCoderPass('  drupal_set_message(check_plain($tainted_data));');
    $this->assertCoderPass('  drupal_set_message(filter_xss_admin($tainted_data));');
    $this->assertCoderPass('  drupal_set_message(format_plural($tainted_count, "1 item", "@count items"));');
    $this->assertCoderPass('  drupal_set_message(check_markup($tainted_data));');
    $this->assertCoderFail('  drupal_set_message($tainted_data);');
    $this->assertCoderFail('  drupal_set_message("Here is some ". $tainted_data);');
    $this->assertCoderFail('  drupal_set_message("Here is some $tainted_data");');
    $this->assertCoderFail('  drupal_set_message(t("Here is some ". $tainted_data));');
    $this->assertCoderFail('  drupal_set_message(t("Here is some !tainted_data", array("!tainted_data" => $tainted_data)));');

    $this->assertCoderPass('  drupal_set_title(t("Here is some safe_data"));');
    $this->assertCoderPass('  drupal_set_title(t("Here is some @safe_data", array("@safe_data" => $tainted_data));');
    $this->assertCoderPass('  drupal_set_title(t("Here is some %safe_data", array("%safe_data" => $tainted_data));');
    $this->assertCoderPass('  drupal_set_title(check_plain($tainted_data));');
    $this->assertCoderPass('  drupal_set_title(filter_xss_admin($tainted_data));');
    $this->assertCoderPass('  drupal_set_title(format_plural($tainted_count, "1 item", "@count items"));');
    $this->assertCoderPass('  drupal_set_title(check_markup($tainted_data));');
    $this->assertCoderFail('  drupal_set_title($tainted_data);');
    $this->assertCoderFail('  drupal_set_title("Here is some ". $tainted_data);');
    $this->assertCoderFail('  drupal_set_title("Here is some $tainted_data");');
    $this->assertCoderFail('  drupal_set_title(t("Here is some ". $tainted_data));');
    $this->assertCoderFail('  drupal_set_title(t("Here is some !tainted_data", array("!tainted_data" => $tainted_data));');
  }

  function testPregReplaceEval() {
    $this->assertCoderPass('  $txt = preg_replace("@(<a href=(.\S+?)[^>]*>(.+?)</a>)@mi", "myfunction("\\2", "\\3")", $txt);');
    $this->assertCoderFail('  $txt = preg_replace("@(<a href=(.\S+?)[^>]*>(.+?)</a>)@emi", "myfunction("\\2", "\\3")", $txt);');
    $this->assertCoderPass('  $txt = preg_replace("/(<link[^>]+href=?|<object[^>]+codebase=?|@import |src=?)?/mis", "myfunction($foo)", $txt);');
    $this->assertCoderFail('  $txt = preg_replace("/(<link[^>]+href=?|<object[^>]+codebase=?|@import |src=?)?/emis", "myfunction($foo)", $txt);');
    $this->assertCoderPass('  $text=preg_replace("/^((> ?)+)([^>])/m", "EMAILDIV". ($oldest - substr_count("$1",">")).":$3", $text);');
    $this->assertCoderFail('  $text=preg_replace("/^((> ?)+)([^>])/me", "EMAILDIV". ($oldest - substr_count("$1",">")).":$3", $text);');
  }

  function testSecurityDbRewrite() {
    $this->assertCoderPass('  $results = db_query(db_rewrite_sql("SELECT * FROM {node} n"));');
    $this->assertCoderPass('  $results = db_query(db_rewrite_sql("SELECT * FROM {node} foo", "foo"));');
    $this->assertCoderPass('  $results = db_query(db_rewrite_sql("SELECT * FROM {node}", "{node}"));');
    $this->assertCoderPass('  $results = db_query(db_rewrite_sql("SELECT * FROM {mytable} t INNER JOIN {node} n ON t.nid = n.nid"));');
    $this->assertCoderFail('  $results = db_query("SELECT * FROM {node}");');
    $this->assertCoderFail('  $results = db_query(db_rewrite_sql("SELECT * FROM {node}"));');
    $this->assertCoderFail('  $results = db_query("SELECT * FROM {mytable} t INNER JOIN {node} n ON t.nid = n.nid");');
    $this->assertCoderFail('  $results = db_query(db_rewrite_sql("SELECT * FROM {mytable} t INNER JOIN {node} ON t.nid = n.nid"));');
  }
}
