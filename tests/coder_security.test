<?php
require_once(dirname(__FILE__) .'/coder_test_case.tinc');

class CoderSecurityTest extends CoderTestCase {
  function get_info() {
    return array(
      'name' => t('Coder Security Tests'),
      'desc' => t('Tests for the coder security review.'),
      'group' => 'Coder'
    );
  }
  
  function setUp() {
  }

  function testSecurity() {
    $snippets = array(
      '$var = l(check_plain($input), "path/to/drupal");' => CODER_NOT_OK,
      '$var = l(check_plain($input), "path/to/drupal", array("html" => FALSE);' => CODER_NOT_OK,
      '$var = l(check_plain($input), "path/to/drupal", array("html" => $value);' => CODER_NOT_OK,
      '$var = l(check_plain($input), "path/to/drupal", array("html" => 0);' => CODER_NOT_OK,
      '$var = l(check_plain($input), "path/to/drupal", array("html" => TRUE);' => CODER_OK,
      '$var = l(check_plain($input), "path/to/drupal", array(\'html\' => TRUE);' => CODER_OK,
      '$var = l(check_plain($input), "path/to/drupal", array("html" => 1);' => CODER_OK,
      '$var = l(check_plain($input), "path/to/drupal", array(\'html\' => 1);' => CODER_OK,
      // Check for insecure SQL variable replacement.
      '  $results = db_query("SELECT * FROM {node} WHERE nid=$nid");' => CODER_NOT_OK,
      '  $results = db_query("SELECT * FROM {false_accounts} WHERE uids REGEXP \'^%s,|,%s,|,%s$\'");' => CODER_OK,
      '  $results = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=\'%s\' AND (r.title REGEXP \'^[^[:alpha:]].*$\')");' => CODER_OK,
      '  $results = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=\'%s\' AND (r.title REGEXP \'^[^[:alpha:]].*$\') AND nid=$nid");' => CODER_NOT_OK,
      '  $results = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {node_revisions} r USING (nid, vid) WHERE n.type=$type AND (r.title REGEXP \'^[^[:alpha:]].*$\')");' => CODER_NOT_OK,
      '  $results = db_query("SELECT * FROM {foo} WHERE name=$name");' => CODER_NOT_OK,
      '  db_query("INSERT INTO {foo} SET name=\'$name\'");' => CODER_NOT_OK,
      '  update_sql("INSERT INTO {foo} SET name=\'$name\'");' => CODER_OK,
      // Unquoted %s placeholder tests.
      '  $sql = "SELECT * FROM {foo} WHERE name=%s";' => CODER_NOT_OK,
      '  $sql = "INSERT INTO {foo} (%s)";' => CODER_NOT_OK,
      '  $sql = "INSERT INTO {foo} (1,%s)";' => CODER_NOT_OK,
      '  $sql = "INSERT INTO {foo} (1, %s)";' => CODER_NOT_OK,
      '  $sql = "SELECT * FROM {foo} WHERE name=\'%s\'";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (\'%s\')";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (1,\'%s\')";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (1, \'%s\')";' => CODER_OK,
      '  $sql = "SELECT * FROM {foo} WHERE name=%d";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (%d)";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (1,%d)";' => CODER_OK,
      '  $sql = "INSERT INTO {foo} (1, %d)";' => CODER_OK,
    );
    $this->runCoderTests($snippets, 'security');
  }
}
